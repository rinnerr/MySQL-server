---
tasks file for keystone
- name: "Configure Openstack {{ repository_openstack_release }} release repository"
  package:
    name: "centos-release-openstack-{{ repository_openstack_release }}"
    state: present
  when: repository_manage_openstack_repository

- name: Install packages
  package:
    name: "{{ pkg }}"
    state: present
  with_items: "{{ _packages }}"
  loop_control:
    loop_var: pkg
  ignore_errors: "{{ ansible_check_mode }}"
  register: install_packages
  until: install_packages is success
  retries: 5
  delay: 2

# - name: Create a new database with name 'keystone'
#   mysql_db:
#     name: keystone
#     state: present
#     login_user: "{{ mysql_root }}"
#     login_password: "{{ mysql_root_pass }}"

# - name: create MYSQL client user for keystone master
#   mysql_user:
#     login_user: "{{ mysql_root }}"
#     login_password: "{{ mysql_root_pass }}"
#     name: "{{ keystone_user }}"
#     password: "{{ keystone_pass }}"
#     priv: 'keystone.*:ALL PRIVILEGES'
#     state: present
#     host: 'localhost'
    
- name: config keystone user_stderr
  command: openstack-config --set /etc/keystone/keystone.conf DEFAULT use_stderr True

- name: config mysql database for keystone
  command: openstack-config --set /etc/keystone/keystone.conf database connection 'mysql+pymysql://keystone:{{ keystone_pass }}@127.0.0.1/keystone'

- name: Check if credential keys already exist
  stat:
    path: "{{ keystone_credential_key_repository }}/0"
  register: _credential_keys

- name: Create credential keys for Keystone
  command: /usr/bin/keystone-manage credential_setup \
                                    --keystone-user "{{ keystone_system_user_name }}" \
                                    --keystone-group "{{ keystone_system_group_name }}"
  register: create_credential_keys
  when:
    - not _credential_keys.stat.exists

- name: Ensure newest key is used for credential in Keystone
  command: /usr/bin/keystone-manage credential_migrate \
                                    --keystone-user "{{ keystone_system_user_name }}" \
                                    --keystone-group "{{ keystone_system_group_name }}"
  when: create_credential_keys is skipped

- name: Rotate credential keys for Keystone
  command: /usr/bin/keystone-manage credential_rotate \
                                    --keystone-user "{{ keystone_system_user_name }}" \
                                    --keystone-group "{{ keystone_system_group_name }}"
  when: create_credential_keys is skipped

- name: Check if fernet keys already exist
  stat:
    path: "{{ keystone_fernet_tokens_key_repository }}/0"
  register: _fernet_keys

- name: Create fernet keys for Keystone
  command: /usr/bin/keystone-manage fernet_setup \
                                    --keystone-user "{{ keystone_system_user_name }}" \
                                    --keystone-group "{{ keystone_system_group_name }}"
  when: not _fernet_keys.stat.exists

- name: Rotate fernet keys for Keystone
  command: /usr/bin/keystone-manage fernet_rotate \
                                    --keystone-user "{{ keystone_system_user_name }}" \
                                    --keystone-group "{{ keystone_system_group_name }}"
  when: _fernet_keys.stat.exists

- name: Keystone db-sync
  command: /usr/bin/keystone-manage db_sync

- name: Bootstrap keystone admin and endpoint
  command: /usr/bin/keystone-manage bootstrap \
                      --bootstrap-username "{{ keystone_admin_user_name }}" \
                      --bootstrap-password "{{ keystone_auth_admin_password }}" \
                      --bootstrap-project-name "{{ keystone_admin_tenant_name }}" \
                      --bootstrap-role-name "{{ keystone_role_name }}" \
                      --bootstrap-service-name "{{ keystone_service_name }}" \
                      --bootstrap-region-id "{{ keystone_service_region }}" \
                      --bootstrap-admin-url "{{ keystone_service_adminuri }}" \
                      --bootstrap-public-url "{{ keystone_service_publicuri }}" \
                      --bootstrap-internal-url "{{ keystone_service_internaluri }}"
  no_log: true
  changed_when: false
  register: add_service
  until: add_service is success
  retries: 5
  delay: 10

# - name: create service keystone-admin
#   template:
#     src: "{{ path_home }}/roles/keystone/templates/keystone-admin.service.j2"
#     dest: "/etc/systemd/system/keystone-admin.service"
#     owner: root
#     group: root
#     mode: "0644"

- name: enable and start service
  systemd:
    daemon_reload: yes
    name: keystone-admin
    state: started
    enabled: yes

- name: Wait for services to be up
  delegate_to: "{{ master_host }}"
  uri:
    url: "{{ item.url }}"
    validate_certs: "{{ item.validate_certs }}"
    method: "HEAD"
    status_code: 300
  with_items:
    - url: "{{ keystone_service_adminuri }}"
      validate_certs: "{{ not keystone_service_adminuri_insecure }}"
  register: _wait_check
  until: _wait_check is success
  retries: 12
  delay: 5

# - name: Add default role  #create role
#   shell: openstack role create "{{ _role_name }}"
#   environment:
#     OS_IDENTITY_API_VERSION: "3"  
#     OS_AUTH_URL: "http://{{ bind_address }}:35357"
#     OS_USER_DOMAIN_ID: "default"
#     OS_PROJECT_DOMAIN_ID: "default"
#     OS_PROJECT_NAME: "{{ keystone_admin_tenant_name }}"
#     OS_USERNAME: "{{ keystone_admin_user_name }}"
#     OS_PASSWORD: "{{ keystone_auth_admin_password }}"
#   register: add_service
#   when:
#     - _role_name is defined
#   until: add_service is success
#   retries: 2
#   delay: 10

# - name: Add service project #create project
#   shell: openstack project create "{{ _project_name }}"
#   environment:
#     OS_IDENTITY_API_VERSION: "3"  
#     OS_AUTH_URL: "http://{{ bind_address }}:35357"
#     OS_USER_DOMAIN_ID: "default"
#     OS_PROJECT_DOMAIN_ID: "default"
#     OS_PROJECT_NAME: "{{ keystone_admin_tenant_name }}"
#     OS_USERNAME: "{{ keystone_admin_user_name }}"
#     OS_PASSWORD: "{{ keystone_auth_admin_password }}"
#   register: add_service
#   when:
#     - _project_name is defined
#   until: add_service is success
#   retries: 2
#   delay: 10

# - name: Add service user #create user
#   shell: openstack user create --password "{{ _service_user_password }}" --project "{{ _project_name }}" "{{ _service_user_name }}"
#   environment:
#     OS_IDENTITY_API_VERSION: "3"  
#     OS_AUTH_URL: "http://{{ bind_address }}:35357"
#     OS_USER_DOMAIN_ID: "default"
#     OS_PROJECT_DOMAIN_ID: "default"
#     OS_PROJECT_NAME: "{{ keystone_admin_tenant_name }}"
#     OS_USERNAME: "{{ keystone_admin_user_name }}"
#     OS_PASSWORD: "{{ keystone_auth_admin_password }}"
#   register: add_service
#   when:
#     - _service_user_name is defined
#     - _service_user_password is defined
#   until: add_service is success
#   retries: 2
#   delay: 10
#   no_log: True

# - name: Add service user to admin role
#   shell: openstack role add --user "{{ _service_user_name }}" --project "{{ _project_name }}" "{{ _service_role_name }}"
#   environment:
#     OS_IDENTITY_API_VERSION: "3"  
#     OS_AUTH_URL: "http://{{ bind_address }}:35357"
#     OS_USER_DOMAIN_ID: "default"
#     OS_PROJECT_DOMAIN_ID: "default"
#     OS_PROJECT_NAME: "{{ keystone_admin_tenant_name }}"
#     OS_USERNAME: "{{ keystone_admin_user_name }}"
#     OS_PASSWORD: "{{ keystone_auth_admin_password }}"
#   register: add_service
#   when:
#     - _service_user_name is defined
#     - _service_role_name is defined
#   until: add_service is success
#   retries: 2
#   delay: 10

# - name: Add services to the keystone service catalog #create service
#   shell: openstack service create --name "{{ item.name }}" --description "{{ item.description }}" --enable "{{ item.type }}"
#   environment:
#     OS_IDENTITY_API_VERSION: "3"  
#     OS_AUTH_URL: "http://{{ bind_address }}:35357"
#     OS_USER_DOMAIN_ID: "default"
#     OS_PROJECT_DOMAIN_ID: "default"
#     OS_PROJECT_NAME: "{{ keystone_admin_tenant_name }}"
#     OS_USERNAME: "{{ keystone_admin_user_name }}"
#     OS_PASSWORD: "{{ keystone_auth_admin_password }}"
#   register: add_service
#   with_items: "{{ _service_catalog }}"
#   when: _service_catalog is defined
#   until: add_service is success
#   retries: 2
#   delay: 10

# - name: Add endpoints to keystone endpoint catalog
#   shell: openstack endpoint create --region "{{ keystone_service_region }}" "{{ item.service }}" "{{ item.interface }}" "{{ item.url }}"
#   environment:
#     OS_IDENTITY_API_VERSION: "3"  
#     OS_AUTH_URL: "http://{{ bind_address }}:35357"
#     OS_USER_DOMAIN_ID: "default"
#     OS_PROJECT_DOMAIN_ID: "default"
#     OS_PROJECT_NAME: "{{ keystone_admin_tenant_name }}"
#     OS_USERNAME: "{{ keystone_admin_user_name }}"
#     OS_PASSWORD: "{{ keystone_auth_admin_password }}"
#   register: add_service
#   until: add_service is success
#   retries: 2
#   delay: 10
#   with_items: "{{ _service_endpoints }}"
#   when: _service_endpoints is defined

- name: create service keystone-public
  template:
    src: "{{ path_home }}/roles/keystone/templates/keystone-public.service.j2"
    dest: "/etc/systemd/system/keystone-public.service"
    owner: root
    group: root
    mode: "0644"

- name: enable and start service
  systemd:
    daemon_reload: yes
    name: keystone-public
    state: started
    enabled: yes


